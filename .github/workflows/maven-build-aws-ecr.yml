# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.
name: Java CI with Maven

on:
  push:
    branches:
      - dev
  pull_request:
    branches:
      - dev

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Build with Maven
      run: mvn -B package --file ./futuionsales/pom.xml

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-1

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Get the current commit SHA
      id: commit-sha
      run: echo "::set-output name=commit_sha::$(git rev-parse --short HEAD)"

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: java-backend-dev
        IMAGE_TAG: ${{ steps.commit-sha.outputs.commit_sha }}
      run: |
        docker build --file ./futuionsales/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

    - name: Set permissions for SSH private key
      run: |
        echo "${{ secrets.AWS_PRIVATE_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem

    - name: Deploy container to AWS EC2
      run: |
        # Replace EC2_IP_ADDRESS with the actual IP address of your EC2 instance
        echo "${{ secrets.AWS_PRIVATE_KEY }}" > ssh_key.pem
        chmod 600 ssh_key.pem

        # Ensure the Docker daemon is running
        sudo systemctl start docker

        # Check the Docker daemon status
        sudo systemctl status docker

        # Debug output: Print the values of variables
        echo "ECR_REGISTRY: $ECR_REGISTRY"
        echo "ECR_REPOSITORY: $ECR_REPOSITORY"
        echo "IMAGE_TAG: $IMAGE_TAG"

        # Pull the new Docker image from ECR
        ssh -o StrictHostKeyChecking=no -i ssh_key.pem ec2-user@3.84.104.198 "docker pull $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

        # Check the exit code of the Docker pull command
        if [ $? -ne 0 ]; then
          echo "Docker pull failed."
          exit 1
        fi

        # Run the new container
        ssh -o StrictHostKeyChecking=no -i ssh_key.pem ec2-user@3.84.104.198 "docker run -d -p 8080:8080 --name java-backend-dev $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

    
            # Run the new container
            ssh -o StrictHostKeyChecking=no -i ssh_key.pem ec2-user@3.84.104.198 "docker run -d -p 8080:8080 --name java-backend-dev $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
        
